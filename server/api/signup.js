const {checkUsernameRequirements, checkPasswordRequirements} = require("../../utilities/AccountValidators");

const Crypto = require('crypto');
const Sqlite3 = require('sqlite3');
var db = require('../db').db;

/**
 * The callback function for the /api/signup POST route. Signs up a user into the database.
 * 
 * The `res` parameter should contain both `username` and `password` in its body.
 * @param {Express.Request} req - The Request object generated by the route.
 * @param {Express.Response} res - The Result object generated by the route.
 * @param {Function} next - The next() function used in the callback.
 * @returns Nothing.
 */
function signup(req, res, next) {
  // use test database if test flag is set
  if (req.body.test) {
    db = new Sqlite3.Database("signup_test_db2.db")
  }

  // check that signup data is real
  if (!req.body.username || !req.body.password) {
    res.status(400).send("Error: Username or password not set!");
    return next("Error: Username or password not set!");
  }

  // test username and password; should throw an error if there's an issue
  try {
    checkUsernameRequirements(req.body.username);
    checkPasswordRequirements(req.body.password);
  } catch (error) {
    res.status(401).send(error.message);
    return next(error.message);
  }

  var salt = Crypto.randomBytes(16);      // salt is required for hashing; it makes 
                                          // otherwise identical hashes different
  Crypto.pbkdf2(req.body.password, salt, 310000, 32, 'sha256', async function(err, hashedPassword) {
    if (err) {
      res.status(500).send(err); 
      return next(err); 
    }

    // insert new user into database
    try {
      var newUser = await insertUser(db, req.body.username, hashedPassword, salt);
      res.status(200).send(`Successfully signed user ${req.body.username} up!`)
      // TODO (integration): After correctly signing up, log the user in
    } catch (err) {
      res.status(500).send(`Error: Failed to insert new user!\nSpecific error: ${err}`);
    }
  });
};
 
/**
 * Inserts a new User into the database `db`.
 * @param {Database} db - The database to insert the User into.
 * @param {String} username - The username of the new User.
 * @param {Buffer} hashedPassword - The hashed password of the new User. This (hopefully) should be generated by `Crypto.pbkdf2()`.
 * @param {String} salt - The salt used in hashing the password. 
 * @returns {Array} An array with the new `id` and `username` of the new User.
 */
async function insertUser(db, username, hashedPassword, salt) {
  var user;
  await db.run('INSERT INTO User (username, hashed_password, salt) VALUES (?, ?, ?)', [
    username,
    hashedPassword,
    salt
  ], function(err) {
    // throw an error if there's an issue
    if (err) throw err; 

    // return the new user from the callback
    user = {
      "id": this.lastID,
      "username": username
    };
  });
  return user;
}

module.exports = {signup, insertUser};